{"version":3,"sources":["Box/Box.js","App.js","serviceWorker.js","index.js"],"names":["Box","_ref","secret","reset","react_default","a","createElement","className","onClick","e","target","style","backgroundColor","App","game","setSecretColor","boxes","document","querySelectorAll","code","Math","floor","random","length","_this","setState","secretGameKey","start","state","isHard","num","Array","fill","i","getRandomColor","number","red","green","blue","concat","correct","activateHardLevel","setTimeout","this","_this2","map","v","Box_Box","key","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"gRAGaA,SAAM,SAAAC,GACnB,IADqBC,EACrBD,EADqBC,OAAOC,EAC5BF,EAD4BE,MAGxB,OAAOC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,MAAMC,QADhB,SAAAC,GAAC,OAAIA,EAAEC,OAAOC,MAAMC,kBAAoBV,EAAQC,IAAUM,EAAEC,OAAOC,MAAMC,gBAAkB,aC4F5FC,oNArFbC,KAAO,CACLC,eAAgB,WAEd,IAAIC,EAAQC,SAASC,iBAAiB,QAEhCC,EAAOH,EADCI,KAAKC,MAAMD,KAAKE,SAASN,EAAMO,SACjBZ,MAAMC,gBAChCY,EAAKC,SAAS,CAACC,cAAeP,KAIlCQ,MAAO,WAEFH,EAAKI,MAAMC,QAEZL,EAAKC,SAAS,CACZK,IAAKC,MAAM,GAAGC,KAAK,UAMtB,IAFD,IAAIhB,EAAQC,SAASC,iBAAiB,QAE5Be,EAAI,EAAGA,EAAIjB,EAAMO,OAAQU,IAEjCjB,EAAMiB,GAAGtB,MAAMC,gBAAkBY,EAAKV,KAAKoB,iBAE7CV,EAAKV,KAAKC,kBAOZmB,eAAgB,SAACC,GAEf,IAAIC,EAAMhB,KAAKC,MAAoB,IAAdD,KAAKE,UACtBe,EAAQjB,KAAKC,MAAoB,IAAdD,KAAKE,UACxBgB,EAAOlB,KAAKC,MAAoB,IAAdD,KAAKE,UAC3B,aAAAiB,OAAcH,EAAd,MAAAG,OAAsBF,EAAtB,MAAAE,OAAgCD,EAAhC,MAIFE,QAAS,WAIN,IAFD,IAAIxB,EAAQC,SAASC,iBAAiB,QAE5Be,EAAI,EAAGA,EAAIjB,EAAMO,OAAQU,IAEjCjB,EAAMiB,GAAGtB,MAAMC,gBAAkBY,EAAKI,MAAMF,eAKhDe,kBAAmB,WAEjBjB,EAAKC,SAAS,CAACK,IAAKC,MAAM,IAAIC,KAAK,WACnCU,WAAW,kBAAIlB,EAAKV,KAAKa,SAAQ,QAKrCC,MAAQ,CACNF,cAAe,KACfI,IAAKC,MAAM,GAAGC,KAAK,OACnBH,QAAQ,sFAjERc,KAAK7B,KAAKa,yCAoEZ,IAAAiB,EAAAD,KACE,OACEvC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,MAAIE,QAASmC,KAAK7B,KAAKa,OAAvB,cACAvB,EAAAC,EAAAC,cAAA,MAAIE,QAASmC,KAAK7B,KAAK2B,mBAAvB,cACArC,EAAAC,EAAAC,cAAA,+BAAuBqC,KAAKf,MAAMF,eAClCtB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aAEXoC,KAAKf,MAAME,IAAIe,IAAI,SAACC,EAAEb,GAErB,OAAS7B,EAAAC,EAAAC,cAACyC,EAAD,CAAK7C,OAAQ0C,EAAKhB,MAAMF,cAAevB,MAAOyC,EAAK9B,KAAK0B,QAASQ,IAAKf,eApF1EgB,IAAMC,YCQJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOrD,EAAAC,EAAAC,cAACoD,EAAD,MAASzC,SAAS0C,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.8669c01b.chunk.js","sourcesContent":["import React from \"react\";\nimport './box.css';\n// This named export returns just a single div with the class of box\nexport const Box = ({secret,reset}) =>\n{\n    let check = e => e.target.style.backgroundColor === secret? reset() : e.target.style.backgroundColor = \"white\";\n    return <div className=\"box\" onClick={check}></div>;\n}","import React from 'react';\nimport { Box } from \"./Box/Box\";\nimport './App.css';\n\nclass App extends React.Component {\n  /**\n  * Warning: This lifecycle is currently deprecated, and will be removed in React version 17+\n  More details here: https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html\n  */\n  componentDidMount() {\n    this.game.start();\n  }\n  game = {\n    setSecretColor: ()=>\n    { \n      let boxes = document.querySelectorAll(\".box\");\n      let special = Math.floor(Math.random()*boxes.length);\n        let code = boxes[special].style.backgroundColor;\n        this.setState({secretGameKey: code})\n    },\n\n    // function to start the game up\n    start: ()=>\n    {\n      if(this.state.isHard)\n      {\n        this.setState({\n          num: Array(5).fill(\"easy\")\n        })\n      }\n      // reseting the defualt value in the state of the application\n      let boxes = document.querySelectorAll(\".box\");\n      // box manipulation here\n       for( let i = 0; i < boxes.length; i++)\n      {\n        boxes[i].style.backgroundColor = this.game.getRandomColor();\n      }\n      this.game.setSecretColor()\n\n      \n    },\n\n\n    // random color\n    getRandomColor: (number)=>\n    {\n      let red = Math.floor(Math.random()*256);\n      let green = Math.floor(Math.random()*256);\n      let blue = Math.floor(Math.random()*256);\n      return `rgb(${red}, ${green}, ${blue})`;\n    },\n\n    // when the game is correct\n    correct: ()=>\n    {\n      let boxes = document.querySelectorAll(\".box\");\n      // box manipulation here\n       for( let i = 0; i < boxes.length; i++)\n      {\n        boxes[i].style.backgroundColor = this.state.secretGameKey;\n      }\n    },\n\n    // ActivateHardLevel\n    activateHardLevel: ()=>\n    {\n      this.setState({num: Array(25).fill(\"games\")})\n      setTimeout(()=>this.game.start(),45)\n    }\n\n  };\n\n  state = { \n    secretGameKey: null,\n    num: Array(5).fill(\"sds\"),\n    isHard: false\n    }\n  render()\n  {\n    return (\n      <div className=\"App\">\n        <h3 onClick={this.game.start}>Start game</h3>\n        <h5 onClick={this.game.activateHardLevel}>Hard level</h5>\n        <p>what color is this {this.state.secretGameKey}</p>\n        <div className=\"container\">\n          {\n            this.state.num.map((v,i)=>\n            {\n             return ( <Box secret={this.state.secretGameKey} reset={this.game.correct} key={i}/>)\n            })\n          }\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n\n// am too selffish to be moved","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}